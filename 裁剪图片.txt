1 安装 npm install cropperjs 安装

2 引入 css js 
  import 'cropperjs/dist/cropper.css'
  import Cropper from 'cropperjs'

3 将你的 img 图片包裹到一个块元素中  确保图片完整的填充到区域中 操作如下：
<div class="update-photo">
	<img class="img" :src="img" ref="img">
</div>

.img{
	display: block;
	max-width: 100%;
}

4 js 中 操作 document 要写在 mounted () 生命周期函数中
 mounted () {
    const image = this.$refs.img // 获取img标签
    this.cropper = new Cropper(image, {
      viewMode: 1, // 查看模式 默认是 0 
      dragMode: 'move', // 拖动模式  默认 crop move none 
      aspectRatio: 1, // 截图比例 默认16/9 
      autoCropArea: 1, // 自动截取比例 
      cropBoxMovable: false, // 截图区域是否可以移动
      cropBoxResizable: false, // 截图缩放
      background: false // 背景颜色
			movable: true // 画布是否可以移动 默认是 true 
    })
  },

5 点击完成得到内容
	<div class="confirm" @click="onConfirm">完成</div>
	methods: {
    onConfirm () {
      // 基于服务端的裁切使用 getData 方法获取裁切参数 
      // console.log(this.cropper.getData())

      // 纯客户端的裁切使用 getCroppedCanvas 获取裁切的文件对象 PC 端不要用
      this.cropper.getCroppedCanvas().toBlob(blob => {
        this.updateUserPhoto(blob)
      })
    },

    async updateUserPhoto (blob) {
      this.$toast.loading({
        message: '保存中...',
        forbidClick: true, // 禁止背景点击
        duration: 0 // 持续展示
      })
      try {
        // 错误的用法
        // 如果接口要求 Content-Type 是 application/json
        // 则传递普通 JavaScript 对象
        // updateUserPhoto({
        //   photo: blob
        // })

        // 如果接口要求 Content-Type 是 multipart/form-data
        // 则你必须传递 FormData 对象
        const formData = new FormData()
        formData.append('photo', blob)

        const { data } = await updateUserPhoto(formData)

        // 关闭弹出层
        this.$emit('close')

        // 更新视图
        this.$emit('update-photo', data.data.photo)

        // 提示成功
        this.$toast.success('更新成功')
      } catch (err) {
        this.$toast.fail('更新失败')
      }
    }
  }

